import TelegramBot from "node-telegram-bot-api";

const token = process.env.BOT_TOKEN;

if (!token) {
  console.error("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Vercel ‚Üí Settings ‚Üí Environment Variables");
  throw new Error("BOT_TOKEN is missing");
}

// —Å–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –±–µ–∑ polling
const bot = new TelegramBot(token);
let webhookSet = false;

export default async function handler(req, res) {
  try {
    if (req.method === "POST") {
      // Telegram —à–ª—ë—Ç —Å—é–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      bot.processUpdate(req.body);
      return res.status(200).send("ok");
    }

    // –ø—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    if (!webhookSet && process.env.VERCEL_URL) {
      const url = `https://${process.env.VERCEL_URL}/api/webhook`;
      await bot.setWebHook(url);
      webhookSet = true;
      console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${url}`);
    }

    res.status(200).send("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω ‚úÖ");
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –≤ webhook:", err);
    res.status(500).send("Internal Server Error");
  }
}

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text?.toLowerCase() || "";

  if (text === "/start") {
    await bot.sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Vercel üöÄ");
  } else {
    await bot.sendMessage(chatId, `–¢—ã –Ω–∞–ø–∏—Å–∞–ª: ${msg.text}`);
  }
});
