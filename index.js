require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token);

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
const userStates = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
function getMainMenu() {
  return {
    keyboard: [
      ['üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'],
      ['üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', 'üîç –ü–æ–∏—Å–∫'],
      ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
    ],
    resize_keyboard: true
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(msg) {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
  if (userStates[userId]) {
    await handleAdCreation(msg);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
  if (text === '/start') {
    await bot.sendMessage(chatId, 
      `–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! üëã\n\n` +
      `–Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ Bazarige.\n\n` +
      `–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:`, 
      { reply_markup: getMainMenu() }
    );
  } else if (text === '/create' || text === 'üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ') {
    await startAdCreation(chatId, userId);
  } else if (text === 'üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è') {
    await bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª "–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß', { reply_markup: getMainMenu() });
  } else if (text === 'üîç –ü–æ–∏—Å–∫') {
    await bot.sendMessage(chatId, '–†–∞–∑–¥–µ–ª "–ü–æ–∏—Å–∫" –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üöß', { reply_markup: getMainMenu() });
  } else if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
    await bot.sendMessage(chatId, 
      `*–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:*\n\n` +
      `üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ - –ø–æ—à–∞–≥–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n` +
      `üìã –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n` +
      `üîç –ü–æ–∏—Å–∫ - –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n\n` +
      `–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @support`, 
      { parse_mode: 'Markdown', reply_markup: getMainMenu() }
    );
  } else {
    await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é üëá', { reply_markup: getMainMenu() });
  }
}

async function startAdCreation(chatId, userId) {
  userStates[userId] = {
    step: 'title',
    data: {}
  };
  
  await bot.sendMessage(chatId, 
    'üìù *–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è*\n\n' +
    '*–®–∞–≥ 1/4:* –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n\n' +
    '_–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel_',
    { 
      parse_mode: 'Markdown',
      reply_markup: {
        keyboard: [['‚ùå –û—Ç–º–µ–Ω–∞']],
        resize_keyboard: true
      }
    }
  );
}

async function handleAdCreation(msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  const state = userStates[userId];

  if (!state) return;

  // –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è
  if (text === '/cancel' || text === '‚ùå –û—Ç–º–µ–Ω–∞') {
    delete userStates[userId];
    await bot.sendMessage(chatId, '‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ', { reply_markup: getMainMenu() });
    return;
  }

  switch (state.step) {
    case 'title':
      if (text.length < 5) {
        await bot.sendMessage(chatId, '‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.');
        return;
      }
      state.data.title = text;
      state.step = 'description';
      await bot.sendMessage(chatId, '‚úèÔ∏è *–®–∞–≥ 2/4:* –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è', { parse_mode: 'Markdown' });
      break;

    case 'description':
      if (text.length < 10) {
        await bot.sendMessage(chatId, '‚ö†Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.');
        return;
      }
      state.data.description = text;
      state.step = 'price';
      await bot.sendMessage(chatId, 'üí∞ *–®–∞–≥ 3/4:* –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: 5000 –∏–ª–∏ "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"_', { parse_mode: 'Markdown' });
      break;

    case 'price':
      state.data.price = text;
      state.step = 'contact';
      await bot.sendMessage(chatId, 'üì± *–®–∞–≥ 4/4:* –í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä: +995 555 123456 –∏–ª–∏ @username_', { parse_mode: 'Markdown' });
      break;

    case 'contact':
      state.data.contact = text;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
      const ad = state.data;
      const adText = `
üéØ *–ù–û–í–û–ï –û–ë–™–Ø–í–õ–ï–ù–ò–ï*

üìå *–ó–∞–≥–æ–ª–æ–≤–æ–∫:* ${ad.title}

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
${ad.description}

üíµ *–¶–µ–Ω–∞:* ${ad.price}

üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${ad.contact}

_–°–æ–∑–¥–∞–Ω–æ: ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Tbilisi' })}_
      `;
      
      await bot.sendMessage(chatId, adText, { parse_mode: 'Markdown' });
      await bot.sendMessage(chatId, 
        '‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
        { reply_markup: getMainMenu() }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      delete userStates[userId];
      break;
  }
}

// –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if (process.env.NODE_ENV !== 'production') {
  bot.on('message', handleMessage);
  bot.startPolling();
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Vercel (webhook)
module.exports = async (req, res) => {
  if (req.method === 'POST') {
    try {
      const { body } = req;
      if (body.message) {
        await handleMessage(body.message);
      }
      res.status(200).json({ ok: true });
    } catch (error) {
      console.error('Error:', error);
      res.status(500).json({ error: 'Internal server error' });
    }
  } else {
    res.status(200).json({ status: 'Bot is running' });
  }
};
