require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');

// === –ù–ê–°–¢–†–û–ô–ö–ò ===
const token = process.env.BOT_TOKEN || '–¢–û–ö–ï–ù_–¢–í–û–ï–ì–û_–ë–û–¢–ê';
const CHAT_ID = '@easymarket_ge';
const MOD_CHAT_ID = '178060329';
const bot = new TelegramBot(token, { polling: true });

// === –ö–ê–¢–ï–ì–û–†–ò–ò / THREAD ID ===
const categories = [['üë© –ñ–µ–Ω—Å–∫–æ–µ'], ['üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'], ['üöó –ê–≤—Ç–æ']];
const CATEGORY_TARGETS = {
  'üë© –ñ–µ–Ω—Å–∫–æ–µ': { chatId: CHAT_ID, threadId: 17 },
  'üì± –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞': { chatId: CHAT_ID, threadId: 9 },
  'üöó –ê–≤—Ç–æ': { chatId: CHAT_ID, threadId: 8 },
};

// === –•–†–ê–ù–ò–õ–ò–©–ï ===
const ads = {}; // –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const pendingAds = {}; // –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏

// === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
function backButton() {
  return { reply_markup: { keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥' }]], resize_keyboard: true } };
}
function categoryKeyboard() {
  return { reply_markup: { keyboard: categories, resize_keyboard: true, one_time_keyboard: true } };
}

// === /start ===
bot.onText(/\/start|\/create/i, (msg) => {
  const chatId = msg.chat.id;
  const userId = String(msg.from.id);
  ads[userId] = { step: 'category', prevStep: null, photos: [] };
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryKeyboard());
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ===
bot.on('message', async (msg) => {
  try {
    const chatId = msg.chat.id;
    const userId = String(msg.from.id);
    const text = msg.text?.trim();
    if (!ads[userId] || msg.photo) return;
    const ad = ads[userId];

    if (text === 'üîô –ù–∞–∑–∞–¥') {
      if (!ad.prevStep) return bot.sendMessage(chatId, '–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ.');
      ad.step = ad.prevStep;
      switch (ad.step) {
        case 'category': return bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryKeyboard());
        case 'title': return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:', backButton());
        case 'description': return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', backButton());
        case 'price': return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"):', backButton());
        case 'photos': return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–Ω–æ–≤–æ (1‚Äì5 —à—Ç):', backButton());
      }
    }

    // --- –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò ---
    if (ad.step === 'category') {
      if (!categories.flat().includes(text)) return;
      ad.category = text;
      ad.prevStep = 'category';
      ad.step = 'photos';
      return bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç 1 –¥–æ 5 —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:', backButton());
    }

    // --- –í–í–û–î –ó–ê–ì–û–õ–û–í–ö–ê ---
    if (ad.step === 'title') {
      ad.title = text;
      ad.prevStep = 'title';
      ad.step = 'description';
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', backButton());
    }

    // --- –í–í–û–î –û–ü–ò–°–ê–ù–ò–Ø ---
    if (ad.step === 'description') {
      ad.description = text;
      ad.prevStep = 'description';
      ad.step = 'price';
      return bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∏–ª–∏ "–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è"):', backButton());
    }

    // --- –í–í–û–î –¶–ï–ù–´ ---
    if (ad.step === 'price') {
      ad.price = text.toLowerCase() === '–¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è' ? '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è' : text;
      ad.prevStep = 'price';
      if (msg.from.username) {
        ad.contact = `@${msg.from.username}`;
        await previewAd(chatId, ad, userId);
      } else {
        ad.step = 'contact';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):', backButton());
      }
    }

    // --- –í–í–û–î –ö–û–ù–¢–ê–ö–¢–ê ---
    if (ad.step === 'contact') {
      ad.contact = text;
      await previewAd(chatId, ad, userId);
    }
  } catch (e) {
    console.error('message handler error', e);
  }
});

// === –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ===
const pendingAlbums = {};
bot.on('photo', async (msg) => {
  try {
    const userId = String(msg.from.id);
    const chatId = msg.chat.id;
    const ad = ads[userId];
    if (!ad || ad.step !== 'photos') return;

    if (msg.media_group_id) {
      if (!pendingAlbums[msg.media_group_id]) pendingAlbums[msg.media_group_id] = [];
      pendingAlbums[msg.media_group_id].push(msg);

      setTimeout(async () => {
        const album = pendingAlbums[msg.media_group_id];
        if (!album) return;
        album.sort((a, b) => a.message_id - b.message_id);
        const photos = album.map(m => m.photo[m.photo.length - 1].file_id).slice(0, 5);
        ad.photos = photos;
        delete pendingAlbums[msg.media_group_id];

        ad.prevStep = 'photos';
        ad.step = 'title';
        bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:', backButton());
      }, 600);
    } else {
      ad.photos = msg.photo.map(p => p.file_id).slice(0, 5);
      ad.prevStep = 'photos';
      ad.step = 'title';
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫:', backButton());
    }
  } catch (e) {
    console.error('photo handler error', e);
  }
});

// === –ü–†–ï–î–ü–†–û–°–ú–û–¢–† ===
async function previewAd(chatId, ad, ownerId) {
  try {
    ad.step = 'confirm';
    const date = new Date().toLocaleString('ru-RU');
    const caption = `
üìÖ <b>${date}</b>
üì¶ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${ad.category}
üìù <b>${ad.title}</b>
üí¨ ${ad.description}
üí∞ <b>–¶–µ–Ω–∞:</b> ${ad.price}
üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${ad.contact}
    `;
    await bot.sendMediaGroup(chatId, ad.photos.map((p, i) => ({
      type: 'photo',
      media: p,
      caption: i === ad.photos.length - 1 ? caption : undefined,
      parse_mode: 'HTML',
    })));
    await bot.sendMessage(chatId, '‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é', callback_data: `send_to_moderation_${ownerId}` }],
          [{ text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `edit_menu_${ownerId}` }, { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_ad_${ownerId}` }],
        ],
      },
    });
  } catch (e) {
    console.error('previewAd error', e);
  }
}

// === CALLBACKS ===
bot.on('callback_query', async (query) => {
  try {
    await bot.answerCallbackQuery(query.id);
    const data = query.data || '';
    const senderId = String(query.from.id);

    // --- –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
    if (data.startsWith('edit_menu_')) {
      const ownerId = data.split('_')[2];
      const ad = ads[ownerId];
      if (!ad) return;
      return bot.sendMessage(senderId, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: `edit_field_${ownerId}_category` }],
            [{ text: 'üñº –§–æ—Ç–æ', callback_data: `edit_field_${ownerId}_photos` }],
            [{ text: 'üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫', callback_data: `edit_field_${ownerId}_title` }],
            [{ text: 'üí¨ –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_field_${ownerId}_description` }],
            [{ text: 'üí∞ –¶–µ–Ω—É', callback_data: `edit_field_${ownerId}_price` }],
            [{ text: 'üë§ –ö–æ–Ω—Ç–∞–∫—Ç', callback_data: `edit_field_${ownerId}_contact` }],
          ],
        },
      });
    }

    // --- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è ---
    if (data.startsWith('edit_field_')) {
      const [, , ownerId, field] = data.split('_');
      const ad = ads[ownerId];
      if (!ad) return;
      ad.step = field;
      ad.prevStep = 'confirm';

      switch (field) {
        case 'category': return bot.sendMessage(senderId, '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', categoryKeyboard());
        case 'photos': return bot.sendMessage(senderId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–æ—Ç–æ (1‚Äì5 —à—Ç):', backButton());
        case 'title': return bot.sendMessage(senderId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:', backButton());
        case 'description': return bot.sendMessage(senderId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:', backButton());
        case 'price': return bot.sendMessage(senderId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:', backButton());
        case 'contact': return bot.sendMessage(senderId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç:', backButton());
      }
    }

    // --- –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é ---
    if (data.startsWith('send_to_moderation_')) {
      const ownerId = data.split('_')[3];
      const ad = ads[ownerId];
      if (!ad) return;

      pendingAds[ownerId] = ad;
      const date = new Date().toLocaleString('ru-RU');
      const caption = `
üìÖ <b>${date}</b>
üì¶ <b>${ad.category}</b>
üìù <b>${ad.title}</b>
üí¨ ${ad.description}
üí∞ <b>${ad.price}</b>
üë§ <b>${ad.contact}</b>
      `;
      await bot.sendMediaGroup(MOD_CHAT_ID, ad.photos.map((p, i) => ({
        type: 'photo',
        media: p,
        caption: i === ad.photos.length - 1 ? caption : undefined,
        parse_mode: 'HTML',
      })));
      await bot.sendMessage(MOD_CHAT_ID, `üïµÔ∏è –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç ${ad.contact}`, {
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_${ownerId}` }, { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_${ownerId}` }],
          ],
        },
      });
      return;
    }

    // --- –æ–¥–æ–±—Ä–µ–Ω–∏–µ ---
    if (data.startsWith('approve_')) {
      const ownerId = data.split('_')[1];
      const ad = pendingAds[ownerId];
      if (!ad) return;
      const target = CATEGORY_TARGETS[ad.category];
      const date = new Date().toLocaleString('ru-RU');
      const caption = `
üìÖ <b>${date}</b>
üì¶ <b>${ad.category}</b>
üìù <b>${ad.title}</b>
üí¨ ${ad.description}
üí∞ <b>${ad.price}</b>
üë§ <b>${ad.contact}</b>
      `;
      const sent = await bot.sendMediaGroup(target.chatId, ad.photos.map((p, i) => ({
        type: 'photo',
        media: p,
        caption: i === ad.photos.length - 1 ? caption : undefined,
        parse_mode: 'HTML',
      })), { message_thread_id: target.threadId });

      const mainMsgId = sent[sent.length - 1].message_id;
      ad.messageId = mainMsgId;
      await bot.sendMessage(target.chatId, 'üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', {
        message_thread_id: target.threadId,
        reply_to_message_id: mainMsgId,
      });

      await bot.sendMessage(ownerId, `üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${ad.category}!`);
      delete pendingAds[ownerId];
      return;
    }

    // --- –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ---
    if (data.startsWith('reject_')) {
      const ownerId = data.split('_')[1];
      delete pendingAds[ownerId];
      await bot.sendMessage(ownerId, '‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.');
      return;
    }

  } catch (e) {
    console.error('callback_query handler error', e);
  }
});

console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...');
